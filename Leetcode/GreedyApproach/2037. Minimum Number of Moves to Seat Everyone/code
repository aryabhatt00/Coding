| Operation           | Complexity                 |
| ------------------- | -------------------------- |
| Sorting both arrays | O(n log n)                 |
| One-pass alignment  | O(n)                       |
| Space               | O(1) extra (in-place sort) |


********************************************************

#Java
  import java.util.Arrays;
class Solution {
    public int minMovesToSeat(int[] seats, int[] students) {
        Arrays.sort(seats);
        Arrays.sort(students);
        int minMoves=0;
        for(int i=0;i<seats.length;i++){
            if(seats[i]-students[i]>0){
            minMoves+=seats[i]-students[i];}
            else{
                minMoves+= (-seats[i]+students[i]);
            }
        }
        return minMoves;
    }
}

********************************************************
#Python
class Solution:
    def minMovesToSeat(self, seats: list[int], students: list[int]) -> int:
        seats.sort()
        students.sort()
        min_moves = 0
        for i in range(len(seats)):
            min_moves += abs(seats[i] - students[i])
        return min_moves
********************************************************
